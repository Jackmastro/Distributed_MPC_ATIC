function cost = CostFunction(x, u, ~, ~, household) 
    
    % States
    T_F  = x(:,1);
    % T_S1 = x(:,2);
    % T_S2 = x(:,3);
    T_b  = x(:,4);
    % T_S3 = x(:,5);
    T_R  = x(:,6);
    
    % Inputs
    T_F_pred_I = u(:,1);
    T_R_succ_I = u(:,2);
    m_F  = u(:,3);
    % m_U  = u(:,4);
    m_O  = u(:,5);
    m_R_succ_I = u(:,6);
    m_R  = u(:,7);

    if household.is_first_house
        cost =     household.Q .* norm(T_b - household.T_set).^2 ...
             + household.params.lambda_m_O_pred' * (m_F - household.params.m_O_pred_pred)...
             + 0.5 * household.params.delta_m_O_pred * (norm(m_F - household.params.m_O_pred_pred)).^2 ...
             + household.params.lambda_m_R_pred' * (m_R - household.params.m_R_I_pred)...
             + 0.5 * household.params.delta_m_R_pred * (norm(m_R - household.params.m_R_I_pred)).^2 ...
             + household.params.lambda_T_F_pred' * (T_F_pred_I - household.params.T_F_pred_pred)...
             + 0.5 * household.params.delta_T_F_pred * (norm(T_F_pred_I - household.params.T_F_pred_pred)).^2 ...
             + household.params.lambda_T_R_pred' * (T_R - household.params.T_R_I_pred)...
             + 0.5 * household.params.delta_T_R_pred * (norm(T_R - household.params.T_R_I_pred)).^2;  
    
    elseif household.is_bypass_house
        cost =     household.Q .* norm(T_b - household.T_set).^2 ...
             + household.params.lambda_m_O_succ' * (m_O - household.params.m_O_I_succ)...
             + 0.5 * household.params.delta_m_O_succ * (norm(m_O - household.params.m_O_I_succ)).^2 ...
             + household.params.lambda_m_R_succ' * (m_R_succ_I - household.params.m_R_succ_succ)...
             + 0.5 * household.params.delta_m_R_succ * (norm(m_R_succ_I - household.params.m_R_succ_succ)).^2 ...
             + household.params.lambda_T_F_succ' * (T_F - household.params.T_F_I_succ)...
             + 0.5 * household.params.delta_T_F_succ * (norm(T_F - household.params.T_F_I_succ)).^2 ....
             + household.params.lambda_T_R_succ' * (T_R_succ_I - household.params.T_R_succ_succ)...
             + 0.5 * household.params.delta_T_R_succ *  (norm(T_R_succ_I - household.params.T_R_succ_succ)).^2;   
    
    else
        cost =     household.Q .* norm(T_b - household.T_set).^2 ...
             + household.params.lambda_m_O_pred' * (m_F - household.params.m_O_pred_pred)...
             + 0.5 * household.params.delta_m_O_pred * (norm(m_F - household.params.m_O_pred_pred)).^2 ...
             + household.params.lambda_m_O_succ' * (m_O - household.params.m_O_I_succ)...
             + 0.5 * household.params.delta_m_O_succ * (norm(m_O - household.params.m_O_I_succ)).^2 ...
             + household.params.lambda_m_R_pred' * (m_R - household.params.m_R_I_pred)...
             + 0.5 * household.params.delta_m_R_pred * (norm(m_R - household.params.m_R_I_pred)).^2 ...
             + household.params.lambda_m_R_succ' * (m_R_succ_I - household.params.m_R_succ_succ)...
             + 0.5 * household.params.delta_m_R_succ * (norm(m_R_succ_I - household.params.m_R_succ_succ)).^2 ...
             + household.params.lambda_T_F_pred' * (T_F_pred_I - household.params.T_F_pred_pred)...
             + 0.5 * household.params.delta_T_F_pred * (norm(T_F_pred_I - household.params.T_F_pred_pred)).^2 ...
             + household.params.lambda_T_F_succ' * (T_F - household.params.T_F_I_succ)...
             + 0.5 * household.params.delta_T_F_succ * (norm(T_F - household.params.T_F_I_succ)).^2 ...
             + household.params.lambda_T_R_pred' * (T_R - household.params.T_R_I_pred)...
             + 0.5 * household.params.delta_T_R_pred * (norm(T_R - household.params.T_R_I_pred)).^2 ...
             + household.params.lambda_T_R_succ' * (T_R_succ_I - household.params.T_R_succ_succ)...
             + 0.5 * household.params.delta_T_R_succ *  (norm(T_R_succ_I - household.params.T_R_succ_succ)).^2;  
    end
end
